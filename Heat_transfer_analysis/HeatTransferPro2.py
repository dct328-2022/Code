status = "use"
# status = "try"
# choose "use" or "try"

import copy
import numpy as np
import matplotlib.pyplot as plt

ii = 232
jj = 250000
tmax = 3600
InitialTemp = 15.427
T = np.ones((ii, jj))*InitialTemp

def LinearInterpolation2D(x1, y1, x2, y2, xi, tol=0.01):
    if abs(x1 - xi) < tol:
        return y1
    elif abs(x2 - xi) < tol:
        return y2
    else:
        k = (y2 - y1) / (x2 - x1)
        yi = k * (xi - x1) + y1
        return yi


def ListLinearInterpolation2D(xlist, ylist, xi, tol=0.01):
    # xlist must be monotonic
    xlength = len(xlist)
    ylength = len(ylist)
    if xlist[1] < xlist[0]:
        case = 1
    else:
        case = 0
    if xlength != ylength:
        print("The lengths of xlist and ylist are not the same!")
    else:
        if xlist[1] >= xlist[0]:
            if xi < xlist[0]:
                yi = LinearInterpolation2D(xlist[0], ylist[0], xlist[1], ylist[1], xi, tol)
            elif xi > xlist[-1]:
                yi = LinearInterpolation2D(xlist[-2], ylist[-2], xlist[-1], ylist[-1], xi, tol)
            else:
                for i in range(1, xlength):
                    if xi >= xlist[i - 1] and xi <= xlist[i]:
                        yi = LinearInterpolation2D(xlist[i - 1], ylist[i - 1], xlist[i], ylist[i], xi, tol)
                        break
        if xlist[1] < xlist[0]:
            if xi > xlist[0]:
                yi = LinearInterpolation2D(xlist[0], ylist[0], xlist[1], ylist[1], xi, tol)
            elif xi < xlist[-1]:
                yi = LinearInterpolation2D(xlist[-2], ylist[-2], xlist[-1], ylist[-1], xi, tol)
            else:
                for i in range(1, xlength):
                    if xi <= xlist[i - 1] and xi >= xlist[i]:
                        yi = LinearInterpolation2D(xlist[i - 1], ylist[i - 1], xlist[i], ylist[i], xi, tol)
                        break
    return yi

def NumberList(Copied):
    numbers = Copied.split()
    EmptyList = []
    for obj in numbers:
        EmptyList.append(float(obj))
    return EmptyList

class FDM1:
    def __init__(self, Name):
        self.Name = Name
        self.AbsoluteZero = -273.15
        self.Layers = []
    def SetAbsoluteZero(self, AbsoluteZero):
        self.AbsoluteZero = AbsoluteZero
    def SetMeshSize(self, ii, jj):
        self.ThicknessLayer = ii
        self.TimePeriod = jj
    def SetInitialTemp(self, InitialTemp):
        self.InitialTemp = InitialTemp
    def SetAmbientTemp(self, AmbientTemp):
        self.AmbientTemp = AmbientTemp
    def SetLayerNumber(self, LayerNumber):
        self.LayerNumber = LayerNumber
    def AddLayer(self, Properties):
        self.Layers.append(Properties)

def FDM(ts1, pclist1, klist1, thickness1, ts2, pclist2, klist2, thickness2, Ts, AbsoluteZero, HeatingType):
    # Calling sequence:
    # ts1: temperature sequence for pclist and klist
    # pclist: product of density and specific heat
    # klist: thermal conductivity
    # Ts: a numpy array, first column should be time, second column should be temperature load
    tmax = Ts[-1, 0]
    dt = float(tmax) / jj
    dx = 0.116 / ii
    i1 = int(thickness1/dx)
    i2 = int(thickness2/dx + i1)
    dx2 = dx * dx
    print("Kappa should be less than %f" % (dx2 / dt / 2))
    dx1 = 1.0 / dx
    tperiod = jj / 10
    tperiod2 = jj / 100

    if HeatingType == "ConvecRadia":
        IniTmepM = np.zeros((1, jj))

    for j in range(0, jj):
        tempI = ListLinearInterpolation2D(Ts[:, 0], Ts[:, 1], j*dt)
        if HeatingType == "ApplyTemperature":
            T[0, j] = tempI
        elif HeatingType == "ApplyHeatFlux":
            pass
        elif HeatingType == "ConvecRadia":
            IniTmepM[0, j] = tempI

    for j in range(1, jj - ii + 2):
        if HeatingType == "ConvecRadia":
            k2 = ListLinearInterpolation2D(ts1, klist1, T[0, j - 1])
            pc2 = ListLinearInterpolation2D(ts1, pclist1, T[0, j - 1])
            Tdf1 = T[1, j - 1] - T[0, j - 1]
            term1 = 25.0*(IniTmepM[0, j - 1] - T[0, j - 1])
            term2 = 0.5386855698e-7*((IniTmepM[0, j - 1] - AbsoluteZero)**4 - (T[0, j - 1] - AbsoluteZero)**4)
            temp = k2 * Tdf1 * dx1 + term1 + term2
            T[0, j] = T[0, j - 1] + temp * dx1 * dt / pc2

        # First Layer
        for i in range(1, i1):
            k2 = ListLinearInterpolation2D(ts1, klist1, T[i, j + i - 2])
            pc2 = ListLinearInterpolation2D(ts1, pclist1, T[i, j + i - 2])
            k3 = ListLinearInterpolation2D(ts1, klist1, T[i - 1, j + i - 2])
            Tdf1 = T[i + 1, j + i - 2] - T[i, j + i - 2]
            Tdf2 = T[i, j + i - 2] - T[i - 1, j + i - 2]
            temp = k2*Tdf1*dx1 - k3*Tdf2*dx1
            T[i, j + i - 1] = T[i, j + i - 2] + temp*dx1*dt/pc2

        # Transition
        i = i1
        km1 = ListLinearInterpolation2D(ts1, klist1, T[i - 1, j + i - 2])
        pcm1 = ListLinearInterpolation2D(ts1, pclist1, T[i - 1, j + i - 2])
        km2 = ListLinearInterpolation2D(ts2, klist2, T[i, j + i - 2])
        Tdf1 = T[i + 1, j + i - 2] - T[i, j + i - 2]
        Tdf2 = T[i, j + i - 2] - T[i - 1, j + i - 2]
        temp = km2 * Tdf1 * dx1 - km1 * Tdf2 * dx1
        T[i, j + i - 1] = T[i, j + i - 2] + temp * dx1 * dt / pcm1

        # Second Layer
        for i in range(i1 + 1, i2):
            k2 = ListLinearInterpolation2D(ts2, klist2, T[i, j + i - 2])
            pc2 = ListLinearInterpolation2D(ts2, pclist2, T[i, j + i - 2])
            k3 = ListLinearInterpolation2D(ts2, klist2, T[i - 1, j + i - 2])
            Tdf1 = T[i + 1, j + i - 2] - T[i, j + i - 2]
            Tdf2 = T[i, j + i - 2] - T[i - 1, j + i - 2]
            temp = k2 * Tdf1 * dx1 - k3 * Tdf2 * dx1
            T[i, j + i - 1] = T[i, j + i - 2] + temp * dx1 * dt / pc2

        # Transition
        i = i2
        km2 = ListLinearInterpolation2D(ts2, klist2, T[i - 1, j + i - 2])
        pcm2 = ListLinearInterpolation2D(ts2, pclist2, T[i - 1, j + i - 2])
        km1 = ListLinearInterpolation2D(ts1, klist1, T[i, j + i - 2])
        Tdf1 = T[i + 1, j + i - 2] - T[i, j + i - 2]
        Tdf2 = T[i, j + i - 2] - T[i - 1, j + i - 2]
        temp = km1 * Tdf1 * dx1 - km2 * Tdf2 * dx1
        T[i, j + i - 1] = T[i, j + i - 2] + temp * dx1 * dt / pcm2

        # Third Layer
        for i in range(i2 + 1, ii - 1):
            k2 = ListLinearInterpolation2D(ts1, klist1, T[i, j + i - 2])
            pc2 = ListLinearInterpolation2D(ts1, pclist1, T[i, j + i - 2])
            k3 = ListLinearInterpolation2D(ts1, klist1, T[i - 1, j + i - 2])
            Tdf1 = T[i + 1, j + i - 2] - T[i, j + i - 2]
            Tdf2 = T[i, j + i - 2] - T[i - 1, j + i - 2]
            temp = k2 * Tdf1 * dx1 - k3 * Tdf2 * dx1
            T[i, j + i - 1] = T[i, j + i - 2] + temp * dx1 * dt / pc2

        # End Surface
        i = ii - 1
        pc2 = ListLinearInterpolation2D(ts1, pclist1, T[i, j + i - 2])
        k3 = ListLinearInterpolation2D(ts1, klist1, T[i - 1, j + i - 2])
        term1 = 1.9400650729590429975*abs(np.cbrt(float(T[i, j + i - 2] - InitialTemp)))*(T[i, j + i - 2] - InitialTemp)
        term2 = 0.42527805000000000000e-7*((T[i, j + i - 2] - AbsoluteZero)**4 - (InitialTemp - AbsoluteZero)**4)
        Tdf1 = T[i, j + i - 2] - T[i-1, j + i - 2]
        temp = dt/pc2*(k3*Tdf1*dx1 + term1 + term2)*dx1
        T[i, j + i - 1] = T[i, j + i - 2] - temp

        if j % tperiod == 0:
            print("%d" % (j / tperiod2) + "% " + "completed. Temperature: %f" % T[i, j])

# Data for GFRP panel
ts1 = "0	5	10	15	20	25	30	35	40	45	50	55	60	65	70	75	80	85	90	95	100	105	110	115	120	125	130	135	140	145	150	155	160	165	170	175	180	185	190	195	200	205	210	215	220	225	230	235	240	245	250	255	260	265	270	275	280	285	290	295	300	305	310	315	320	325	330	335	340	345	350	355	360	365	370	375	380	385	390	395	400	405	410	415	420	425	430	435	440	445	450	455	460	465	470	475	480	485	490	495	500	505	510	515	520	525	530	535	540	545	550	555	560	565	570	575	580	585	590	595	600	900"
pclist1 = "1706.064146	1708.103833	1710.143269	1712.182457	1714.221395	1716.260085	1718.309148	1720.566657	1722.823891	1725.08085	1727.337534	1729.593944	1732.129104	1734.813849	1737.316768	1739.721417	1742.067023	1743.773069	1745.478201	1747.18242	1748.885725	1750.711187	1752.633	1754.30598	1755.976865	1757.647406	1759.317604	1760.98746	1762.656972	1764.290605	1766.317081	1768.341796	1770.364752	1772.385949	1777.292836	1791.943276	1806.575865	1827.729626	1854.926122	1887.666292	1931.899891	1972.706991	2012.029011	2096.150553	2199.694066	2301.463702	2395.968503	2482.800586	2550.902965	2542.306803	2512.107292	2408.060721	2279.375878	2107.849514	2031.963608	2044.242	2072.787152	2149.913279	2225.003713	2401.894333	2565.11436	2740.020304	2972.236238	3144.812603	3409.003821	3691.964999	3967.738142	4295.248975	4586.236243	4867.41005	5134.720158	5203.759291	5042.980681	4515.798532	3750.999441	2917.099066	2275.759429	1935.964498	1750.768087	1645.479672	1583.065954	1542.934172	1525.065792	1499.535492	1464.627408	1444.522938	1449.164772	1449.796324	1455.247418	1475.231532	1500.294875	1523.12223	1537.094842	1555.104363	1575.245717	1597.572561	1628.283823	1630.907689	1626.616265	1626.479794	1613.057795	1540.794006	1446.770781	1360.213965	1258.119444	1163.299252	1076.388127	1043.532889	1018.539463	993.2065157	977.9531306	972.3754436	966.8003063	962.5090886	959.6417799	956.775385	955.0698503	954.9084722	954.747094	954.5857158	954.4243349	954.4243349"
klist1 = "0.317714	0.317714	0.317714	0.317714	0.317714	0.317714	0.317698321	0.31738208	0.317065839	0.316749597	0.316433356	0.316117115	0.315800874	0.315484633	0.315126711	0.314759892	0.314393072	0.314026252	0.313673098	0.313398143	0.313123189	0.312848234	0.31257328	0.312298326	0.312023371	0.31165407	0.311276004	0.310897938	0.310519872	0.310124061	0.30969947	0.309274878	0.308715167	0.308094578	0.307430114	0.306658545	0.305313997	0.303969641	0.302625524	0.300915798	0.298920821	0.296323261	0.293394706	0.289779951	0.284884123	0.280538504	0.274305987	0.267987175	0.261648564	0.255789169	0.249785886	0.245268224	0.242042041	0.239202859	0.237091705	0.234671728	0.231763911	0.228385596	0.224738981	0.220113353	0.215571525	0.208641032	0.202210779	0.194816943	0.187292488	0.179561312	0.170490884	0.160810854	0.151514587	0.14251741	0.133926086	0.125660722	0.118685778	0.113253363	0.109533396	0.107357478	0.106052005	0.104981688	0.10421862	0.103455552	0.102692485	0.101929417	0.10116635	0.100708552	0.10026039	0.099812228	0.099364067	0.098915905	0.098467743	0.097907532	0.097270672	0.096633812	0.095996952	0.095360092	0.094693013	0.093912389	0.093131765	0.092351141	0.091570517	0.090907521	0.090270661	0.089675085	0.089364845	0.089066366	0.088797451	0.088539257	0.088337605	0.088135954	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088	0.088"
ts1 = NumberList(ts1)
pclist1 = NumberList(pclist1)
klist1 = NumberList(klist1)
pclist1 = list(map(lambda xx: xx*1000, pclist1))

# For test only
'''ts1 = [0, 3600, 7200]
pclist1 = [500, 500, 500]
klist1 = [0.3, 0.3, 0.3]
pclist1 = list(map(lambda xx: xx*1000, pclist1))'''

# Loading Temperature
Ts = "0	10	20	30	40	50	60	70	80	90	100	110	120	130	140	150	160	170	180	190	200	210	220	230	240	250	260	270	280	290	300	310	320	330	340	350	360	370	380	390	400	410	420	430	440	450	460	470	480	490	500	510	520	530	540	550	560	570	580	590	600	610	620	630	640	650	660	670	680	690	700	710	720	730	740	750	760	770	780	790	800	810	820	830	840	850	860	870	880	890	900	910	920	930	940	950	960	970	980	990	1000	1010	1020	1030	1040	1050	1060	1070	1080	1090	1100	1110	1120	1130	1140	1150	1160	1170	1180	1190	1200	1210	1220	1230	1240	1250	1260	1270	1280	1290	1300	1310	1320	1330	1340	1350	1360	1370	1380	1390	1400	1410	1420	1430	1440	1450	1460	1470	1480	1490	1500	1510	1520	1530	1540	1550	1560	1570	1580	1590	1600	1610	1620	1630	1640	1650	1660	1670	1680	1690	1700	1710	1720	1730	1740	1750	1760	1770	1780	1790	1800	1810	1820	1830	1840	1850	1860	1870	1880	1890	1900	1910	1920	1930	1940	1950	1960	1970	1980	1990	2000	2010	2020	2030	2040	2050	2060	2070	2080	2090	2100	2110	2120	2130	2140	2150	2160	2170	2180	2190	2200	2210	2220	2230	2240	2250	2260	2270	2280	2290	2300	2310	2320	2330	2340	2350	2360	2370	2380	2390	2400	2410	2420	2430	2440	2450	2460	2470	2480	2490	2500	2510	2520	2530	2540	2550	2560	2570	2580	2590	2600	2610	2620	2630	2640	2650	2660	2670	2680	2690	2700	2710	2720	2730	2740	2750	2760	2770	2780	2790	2800	2810	2820	2830	2840	2850	2860	2870	2880	2890	2900	2910	2920	2930	2940	2950	2960	2970	2980	2990	3000	3010	3020	3030	3040	3050	3060	3070	3080	3090	3100	3110	3120	3130	3140	3150	3160	3170	3180	3190	3200	3210	3220	3230	3240	3250	3260	3270	3280	3290	3300	3310	3320	3330	3340	3350	3360	3370	3380	3390	3400	3410	3420	3430	3440	3450	3460	3470	3480	3490	3500	3510	3520	3530	3540	3550	3560	3570	3580	3590	3600"
Temp = "15.427	146.9519909	214.6736435	261.1446515	296.5631595	325.1892705	349.2136658	369.9129515	388.0966424	404.3104565	418.9397843	432.2669281	444.5048779	455.818295	466.3371111	476.1656567	485.3889741	494.0772974	502.289303	510.0745136	517.475109	524.5273093	531.2624475	537.7078109	543.8873093	549.8220096	555.5305704	561.0295948	566.333922	571.4568688	576.4104306	581.2054509	585.8517641	590.3583173	594.7332732	598.9841	603.1176476	607.1402139	611.057603	614.875175	618.5978906	622.2303497	625.7768252	629.2412939	632.6274628	635.9387931	639.1785214	642.3496788	645.455108	648.4974785	651.4793002	654.4029363	657.2706142	660.0844358	662.8463867	665.5583449	668.2220879	670.8393002	673.4115796	675.9404429	678.4273315	680.873616	683.280601	685.6495294	687.9815857	690.2779004	692.5395523	694.7675725	696.9629465	699.1266173	701.2594874	703.3624215	705.4362483	707.4817626	709.4997271	711.490874	713.4559067	715.3955013	717.3103082	719.2009528	721.0680373	722.9121418	724.733825	726.5336255	728.312063	730.0696385	731.8068359	733.5241223	735.2219489	736.9007519	738.5609528	740.2029593	741.8271659	743.4339545	745.0236946	746.5967441	748.1534501	749.6941484	751.2191651	752.7288161	754.223408	755.7032383	757.1685957	758.6197605	760.057005	761.4805939	762.890784	764.2878253	765.6719608	767.0434266	768.4024527	769.7492626	771.0840741	772.407099	773.7185436	775.018609	776.3074909	777.5853801	778.8524624	780.1089192	781.3549272	782.5906587	783.8162819	785.0319608	786.2378554	787.434122	788.6209131	789.7983777	790.9666611	792.1259056	793.2762498	794.4178294	795.5507769	796.6752219	797.7912911	798.8991083	799.9987947	801.0904687	802.1742463	803.2502408	804.3185633	805.3793224	806.4326245	807.4785735	808.5172716	809.5488185	810.5733121	811.590848	812.6015203	813.6054208	814.6026398	815.5932655	816.5773847	817.5550821	818.526441	819.4915432	820.4504687	821.4032961	822.3501023	823.2909632	824.2259528	825.155144	826.0786082	826.9964156	827.9086352	828.8153344	829.7165798	830.6124366	831.5029687	832.3882392	833.2683099	834.1432414	835.0130935	835.8779247	836.7377928	837.5927543	838.4428649	839.2881794	840.1287515	840.9646343	841.7958797	842.6225389	843.4446622	844.2622991	845.0754984	845.8843079	846.6887747	847.4889454	848.2848654	849.0765798	849.8641327	850.6475677	851.4269275	852.2022545	852.97359	853.740975	854.5044498	855.2640539	856.0198265	856.771806	857.5200302	858.2645366	859.0053618	859.7425421	860.4761132	861.2061103	861.9325679	862.6555203	863.3750012	864.0910436	864.8036804	865.5129437	866.2188654	866.9214767	867.6208086	868.3168916	869.0097558	869.6994306	870.3859454	871.069329	871.7496099	872.426816	873.100975	873.7721143	874.4402608	875.105441	875.7676812	876.4270072	877.0834446	877.7370185	878.387754	879.0356754	879.6808071	880.3231729	880.9627965	881.5997011	882.2339099	882.8654455	883.4943303	884.1205866	884.7442362	885.3653007	885.9838014	886.5997595	887.2131958	887.8241308	888.4325848	889.0385779	889.64213	890.2432606	890.841989	891.4383345	892.0323158	892.6239517	893.2132606	893.8002608	894.3849702	894.9674066	895.5475878	896.125531	896.7012535	897.2747723	897.8461042	898.4152657	898.9822734	899.5471434	900.1098918	900.6705346	901.2290873	901.7855655	902.3399847	902.8923598	903.4427061	903.9910382	904.537371	905.0817189	905.6240963	906.1645175	906.7029964	907.239547	907.774183	908.3069182	908.8377658	909.3667393	909.8938519	910.4191166	910.9425463	911.4641538	911.9839517	912.5019525	913.0181687	913.5326125	914.0452959	914.5562311	915.0654299	915.572904	916.0786652	916.5827248	917.0850944	917.5857853	918.0848086	918.5821753	919.0778965	919.571983	920.0644456	920.5552948	921.0445413	921.5321954	922.0182675	922.5027678	922.9857065	923.4670936	923.946939	924.4252525	924.902044	925.3773231	925.8510993	926.3233821	926.7941809	927.263505	927.7313636	928.1977658	928.6627207	929.1262372	929.5883242	930.0489905	930.5082448	930.9660958	931.4225518	931.8776216	932.3313134	932.7836355	933.2345963	933.6842038	934.1324662	934.5793915	935.0249876	935.4692625	935.912224	936.3538797	936.7942374	937.2333046	937.671089	938.107598	938.542839	938.9768193	939.4095462	939.841027	940.2712687	940.7002786	941.1280636	941.5546307	941.9799869	942.4041389	942.8270936	943.2488577	943.6694378	944.0888408	944.507073	944.924141	945.3400513"

Ts = NumberList(Ts)
Temp = NumberList(Temp)
Ts = np.stack((Ts,Temp))
Ts = np.transpose(Ts)

# For test only
'''Ts = [0, 3600, 7200]
Temp = [0, 500, 1000]
Ts = np.stack((Ts,Temp))
Ts = np.transpose(Ts)'''

# Data for middle layer
ts2 = "0	19.9	29.9	39.9	49.9	59.9	69.9	79.9	89.9	99.9	109.9	119.9	129.9	139.9	149.9	159.9	169.9	179.9	189.9	199.9	209.9	219.9	229.9	239.9	249.9	259.9	269.9	279.9	289.9	299.9	309.9	319.9	329.9	339.9	349.9	359.9	369.9	379.9	389.9	399.9	409.9	419.9	429.9	439.9	449.9	459.9	469.9	479.9	489.9	499.9	509.9	519.9	529.9	539.9	549.9	559.9	569.9	579.9	589.9	599.9	609.9	619.9	629.9	639.9	649.9	659.9	669.9	679.9	689.9	699.9	709.9	719.9	729.9	739.9	749.9	759.9	769.9	779.9	789.9	799.9	809.9	819.9	829.9	839.9	849.9	859.9	869.9	879.9	889.9	899.9	909.9	919.9	929.9	939.9	949.9	959.9	969.9	979.9	989.9	999.9	1009.9	1019.9"
pclist2 = "300	300	300	353.5714	407.1429	460.7143	514.2857	540	565.7143	591.4286	617.1429	642.8571	653.1429	663.4286	673.7143	684	694.2857	704.5714	714.8571	725.1429	735.4286	745.7143	807.4286	869.1429	930.8571	992.5714	1054.286	1116	1177.714	1239.429	1301.143	1362.857	1386	1409.143	1432.286	1455.429	1478.571	1501.714	1524.857	1548	1571.143	1594.286	1597.286	1600.286	1603.286	1606.286	1609.286	1612.286	1615.286	1618.286	1621.286	1624.286	1627.286	1630.286	1633.286	1636.286	1639.286	1642.286	1645.286	1648.286	1651.286	1654.286	1657.286	1660.286	1663.286	1666.286	1669.286	1672.286	1675.286	1678.286	1681.286	1684.286	1687.286	1690.286	1693.286	1696.286	1699.286	1702.286	1705.286	1708.286	1711.286	1714.286	1717.286	1720.286	1723.286	1726.286	1729.286	1732.286	1735.286	1738.286	1741.286	1744.286	1747.286	1750.286	1753.286	1756.286	1759.286	1762.286	1765.286	1768.286	1771.286	1774.286"
klist2 = "2.4	2.4	2.2	2.15	2.125	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.1	2.02	1.94	1.86	1.78	1.7	1.62	1.54	1.46	1.38	1.3	1.29	1.28	1.27	1.26	1.25	1.24	1.23	1.22	1.21	1.2	1.198333333	1.196666667	1.195	1.193333333	1.191666667	1.19	1.188333333	1.186666667	1.185	1.183333333	1.181666667	1.18	1.178333333	1.176666667	1.175	1.173333333	1.171666667	1.17	1.168333333	1.166666667	1.165	1.163333333	1.161666667	1.16	1.158333333	1.156666667	1.155	1.153333333	1.151666667	1.15	1.148333333	1.146666667	1.145	1.143333333	1.141666667	1.14	1.138333333	1.136666667	1.135	1.133333333	1.131666667	1.13	1.128333333	1.126666667	1.125	1.123333333	1.121666667	1.12	1.15	1.18	1.21	1.24	1.27	1.3	1.33	1.36	1.39	1.42	1.45	1.48"
ts2 = NumberList(ts2)
pclist2 = NumberList(pclist2)
klist2 = NumberList(klist2)
pclist2 = list(map(lambda xx: xx*1000, pclist2))
# For test only
'''ts2 = [0, 3600, 7200]
pclist2 = [700, 700, 700]
klist2 = [0.2, 0.2, 0.2]
pclist2 = list(map(lambda xx: xx*1000, pclist2))'''

# Parameters for running program


print("Done")
FDM(ts1, pclist1, klist1, 0.008, ts2, pclist2, klist2, 0.1, Ts, -273.15, "ConvecRadia")

print(T[ii-1, jj-1])

tmax = Ts[-1, 0]
dt = float(tmax)/jj

for i in range(0, 10):
    print("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f" % (T[i, 0], T[i, 1], T[i, 2], T[i, 3], T[i, 4], T[i, 5], T[i, 6], T[i, 7], T[i, 8], T[i, 9]))
fn = "Results.txt"
fn = open(fn, 'w')
for i in range(0, jj, 600):
    fn.write("%f, %f\n" % (float(i+1) / (float(jj)/tmax), T[ii-1, i]))
if i != jj-1:
    i = jj - 1
    fn.write("%f, %f\n" % (float(i + 1) / (float(jj) / tmax), T[ii - 1, i]))

Tr1 = []
for i in range(0, jj-1):
    Tr1.append(float(i)*dt)
plt.plot(Tr1, T[ii-1, 0:-1], label = "FE")
plt.show()
